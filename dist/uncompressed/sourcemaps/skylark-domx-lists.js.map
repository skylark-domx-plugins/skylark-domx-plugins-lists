{"version":3,"sources":["skylark-domx-lists.js"],"names":[],"mappingsfile":"../skylark-domx-lists.js","sourcesContent":["define('skylark-domx-lists/lists',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.lists\",{});\r\n});\n define('skylark-domx-lists/Group',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins\",\r\n  \"./lists\"\r\n],function(langx,$,elmx,plugins,lists){\r\n\r\n    var Group = plugins.Plugin.inherit({\r\n        klassName : \"Group\",\r\n\r\n        pluginName : \"domx.lists.group\",\r\n\r\n        options : {\r\n        \tmultiSelect: false,\r\n\r\n        \tclasses : {\r\n          \tactive : \"active\"\r\n        \t},\r\n\r\n\r\n        \tselectors : {\r\n          \titem : \"li\",                   // \".list-group-item\"\r\n\r\n        \t},\r\n\r\n          item : {\r\n            template : \"<span><i class=\\\"glyphicon\\\"></i><a href=\\\"javascript: void(0);\\\"></a> </span>\",\r\n            checkable : false,\r\n            selectors : {\r\n              icon : \" > span > i\",\r\n              text : \" > span > a\"\r\n            }\r\n          },\r\n\r\n        \tselected : 0\r\n        },\r\n\r\n        state : {\r\n          selected : Object\r\n        },\r\n\r\n        _construct : function(elm,options) {\r\n            this.overrided(elm,options);\r\n            var self = this,\r\n                velm = this._velm = elmx(this._elm),\r\n                itemSelector = this.options.selectors.item;\r\n\r\n            this._$items = velm.$(itemSelector);\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = elmx(this);\r\n\r\n                if (!veItem.hasClass('disabled')) {\r\n                  var value = veItem.data(\"value\");\r\n                  if (value === undefined) {\r\n                    value = self._$items.index(this);\r\n                  }\r\n                  self.selected = value;\r\n                }\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n            this.selected = this.options.selected;\r\n\r\n        },\r\n\r\n        _refresh : function(updates) {\r\n          this.overrided(updates);\r\n          var self  = this;\r\n\r\n          function findItem(valueOrIdx) {\r\n            var $item;\r\n            if (langx.isNumber(valueOrIdx)) {\r\n              $item = self._$items.eq(valueOrIdx);\r\n            } else {\r\n              $item = self._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n            }\r\n            return $item;\r\n          } \r\n                 \r\n          function selectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).addClass(self.options.classes.active);\r\n          }\r\n\r\n          function unselectOneItem(valueOrIdx) {\r\n            findItem(valueOrIdx).removeClass(self.options.classes.active);\r\n          }\r\n\r\n          if (updates[\"selected\"]) {\r\n            if (this.options.multiSelect) {\r\n            } else {\r\n              unselectOneItem(updates[\"selected\"].oldValue);\r\n              selectOneItem(updates[\"selected\"].value);\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Group);\r\n\r\n  return lists.Group = Group;\r\n\r\n});\r\n\r\n\r\n\r\n\n define('skylark-domx-lists/_MultitierList',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-domx-toggles/Collapsable\",\r\n  \"./lists\",\r\n  \"./Group\"\r\n],function(langx,$,elmx,plugins,Collapsable,lists,Group){\r\n\r\n    var _MultitierList = Group.inherit({\r\n        klassName : \"_MultitierList\",\r\n\r\n        options : {\r\n          multitier : {\r\n            mode   : \"\",  // \"tree\" or \"accordion\" or \"popover\"\r\n            levels : 2,\r\n            selectors :  {\r\n              children : \"ul\",  // \"> .list-group\"\r\n              hasChildren : \":has(ul)\",\r\n              toggler : \" > a\"\r\n            },\r\n            classes : {\r\n              collapsed : \"\",\r\n              expanded : \"\"\r\n            },\r\n\r\n            multiExpand : true,\r\n          }\r\n        },\r\n\r\n        state : {\r\n          selected : Object\r\n        },\r\n\r\n        _construct : function(elm,options) {\r\n            this.overrided(elm,options);\r\n            var self = this,\r\n                itemSelector = this.options.selectors.item;\r\n\r\n            var multitierMode = this.options.multitier.mode,\r\n                hasChildrenSelector = this.options.multitier.selectors.hasChildren,\r\n                childrenSelector = this.options.multitier.selectors.children;           \r\n\r\n\r\n              var multiExpand = self.options.multitier.multiExpand,\r\n                  togglerSelector = self.options.multitier.selectors.toggler;\r\n\r\n              this._$items.has(childrenSelector).find(togglerSelector).on(\"click\" + \".\" + this.pluginName, function(e) {\r\n                  e.preventDefault();\r\n\r\n                  if (multiExpand) {\r\n                      langx.scall($(this).closest(itemSelector).siblings().removeClass(\"active\").children(childrenSelector+\".in\").plugin(\"domx.toggles.collapsable\"),\"hide\");\r\n                  }\r\n                  $(this).closest(itemSelector).toggleClass(\"active\").children(childrenSelector).plugin(\"domx.toggles.collapsable\").toggle();\r\n              });\r\n\r\n             this._$items.filter(\".active\").has(childrenSelector).children(childrenSelector).addClass(\"collapse in\");\r\n             this._$items.not(\".active\").has(childrenSelector).children(childrenSelector).addClass(\"collapse\");\r\n        }\r\n\r\n  });\r\n\r\n\r\n  return lists._MultitierList = _MultitierList;\r\n\r\n});\r\n\r\n\r\n\r\n\n define('skylark-domx-lists/Foldable',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins\",\r\n  \"./lists\",\r\n  \"./_MultitierList\"\r\n],function(langx,$,elmx,plugins,lists,_MultitierList){\r\n\r\n  var Foldable = _MultitierList.inherit({\r\n    klassName : \"Foldable\",\r\n\r\n    pluginName : \"domx.lists.foldable\"\r\n\r\n  });\r\n\r\n  plugins.register(Foldable);\r\n\r\n  return lists.Foldable = Foldable;\r\n});\r\n\n define('skylark-domx-lists/Cascadable',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins\",\r\n  \"./lists\",\r\n  \"./_MultitierList\"\r\n],function(langx,$,elmx,plugins,lists,_MultitierList){\r\n\r\n\r\n  var Cascadable = _MultitierList.inherit({\r\n    klassName : \"Cascadable\",\r\n\r\n    pluginName : \"domx.lists.cascadable\"\r\n  });\r\n\r\n\r\n  plugins.register(Cascadable);\r\n\r\n  return lists.Cascadable = Cascadable;\t\r\n});\n define('skylark-domx-lists/Tree',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins\",\r\n  \"./lists\",\r\n  \"./_MultitierList\"\r\n],function(langx,$,elmx,plugins,lists,_MultitierList){\r\n\r\n\r\n  var Cascade = _MultitierList.inherit({\r\n    klassName : \"Tree\",\r\n\r\n    pluginName : \"domx.lists.tree\"\r\n  });\r\n\r\n\r\n  plugins.register(Cascade);\r\n\r\n  return lists.Cascade = Cascade;\t\r\n});\ndefine('skylark-domx-lists/main',[\r\n    \"./lists\",\r\n    \"./Foldable\",\r\n    \"./Cascadable\",\r\n    \"./Group\",\r\n    \"./Tree\"\r\n], function(lists) {\r\n    return lists;\r\n});\ndefine('skylark-domx-lists', ['skylark-domx-lists/main'], function (main) { return main; });\n\n"]}